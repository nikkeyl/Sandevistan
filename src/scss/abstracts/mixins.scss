@mixin adaptive-value(
	$property,
	$start-size,
	$min-size,
	$keep-size: 0,
	$width-from: $container-width,
	$width-to: $min-width
) {
	@if $start-size == 0 {
		$start-size: 0.000001;
	}

	@if $min-size == 0 {
		$min-size: 0.000001;
	}

	// $add-size: math.div($start-size - $min-size, 16);

	@if $width-from == $container-width and $max-width-container == 0 {
		$width-from: $max-width;
	}

	$slope: math.div(($start-size - $min-size), ($width-from - $width-to));
	$y-intersection: -$width-to * $slope + $min-size;

	@if $y-intersection == 0 {
		$y-intersection: 0.000001;
	}

	$fly-value: #{rem($y-intersection)}" + " #{$slope * 100}vw;
	$property-value: #{"clamp(" rem($min-size) "," $fly-value "," rem($start-size) ")"};

	@if $min-size > $start-size {
		$property-value: #{"clamp("
			rem($start-size)
			","
			$fly-value
			","
			rem($min-size)
			")"};
	}

	@if $keep-size != 1 and $keep-size != 3 {
		@include media-min($width-from) {
			#{$property}: rem($start-size);
		}
	}

	@include media-min-max($width-to, $width-from) {
		#{$property}: $property-value;

		// @supports (#{$property}: $property-value) {
		// }

		// @supports not (#{$property}: $property-value) {
		// 	#{$property}: calc(#{rem($min-size)} + #{$add-size} * (100vw - #{rem($width-to)}) / #{math.div($width-from, 16) - math.div($width-to, 16)});
		// }
	}

	@if $keep-size != 1 and $keep-size != 2 {
		@include media-max($width-to) {
			#{$property}: rem($min-size);
		}
	}
}

// Responsive exit from the container https://www.youtube.com/watch?v=NVdlfhkDAGM&pp=ygU70J7RgtC30YvQstGH0LjQstGL0Lkg0LLRi9GF0L7QtCDQuNC3INC60L7QvdGC0LXQudC90LXRgNCy0LA%3D
@mixin responsive-output(
	$image-height,
	$body-width,
	$breakpoint: $tablet,
	$reverse: 0
) {
	$percent: round(math.div($body-width, $max-width-container) * 100);
	$width: $body-width - ($body-width - $percent);

	@if $width <= 10 {
		$width: 0 + #{$width};
	}

	&__inner {
		display: flex;
		flex: 0 0 100%;
	}

	&__container {
		flex: 0 1 100%;

		@if $reverse == 1 {
			display: flex;
			flex-direction: row-reverse;
		}
	}

	&__body {
		@include media-min($breakpoint) {
			width: #{$percent} + "%";
		}
	}

	&__image {
		img {
			width: 100%;
		}

		@include media-min($breakpoint) {
			position: relative;
			flex: 0 0
				calc(
					(
							(100% - #{rem($container-padding)}) *
								math.div(math.div((100 - $percent), 1), 100)
						) + (rem($container-padding) / 2)
				);
			padding-bottom: round(percent($image-height, $max-width));

			img {
				position: absolute;
				inset: 0;
				width: 100%;
				height: 100%;
				object-fit: cover;
			}

			@if $reverse == 1 {
				transform: translateX(100%);
			} @else {
				transform: translateX(-100%);
			}
		}

		@include media-min($container-width) {
			flex: 0 0 calc(50% - (math.div($width, 100) - 0.5) * rem($max-width-container));
		}
	}

	@include media-min($breakpoint) {
		display: flex;

		@if $reverse == 1 {
			flex-direction: row-reverse;
		}
	}

	@include media-max($breakpoint) {
		@if $reverse == 1 {
			display: flex;
			flex-direction: column-reverse;
		}
	}
}

@mixin slide(
	$items,
	$translate,
	$time,
	$animation-delay,
	$direction,
	$breakpoint: $tablet
) {
	$count: $items + 1;

	@include media-min($breakpoint) {
		opacity: 0;
		animation: slide-#{$direction} #{$time}s forwards;

		@if $direction == top {
			transform: translateY(#{$translate} + "%");
		} @else if $direction == bottom {
			transform: translateY(0);
		} @else if $direction == left {
			transform: translateX(#{$translate} + "%");
		} @else {
			transform: translateX(0);
		}

		@keyframes slide-#{$direction} {
			100% {
				opacity: 1;

				@if $direction == top {
					transform: translateY(0);
				} @else if $direction == bottom {
					transform: translateY(#{$translate} + "%");
				} @else if $direction == left {
					transform: translateX(0);
				} @else {
					transform: translateX(#{$translate} + "%");
				}
			}
		}

		@for $i from 2 through $count {
			$delay: ($i - 1) * $animation-delay;

			&:nth-child(#{$i}) {
				animation-delay: #{$delay}s;
			}
		}
	}
}

// Triangle using pseudo elements
@mixin triangle($color, $direction, $top, $right, $bottom, $left, $position) {
	position: $position;
	width: 0;
	height: 0;

	@if $direction == bottom {
		margin-top: 0 - round(calc($top / 2.5));
		border-top: rem($top) solid $color;
		border-right: rem($right) solid transparent;
		border-left: rem($left) solid transparent;
	} @else if $direction == up {
		margin-bottom: 0 - round(calc($bottom / 2.5));
		border-right: rem($right) solid transparent;
		border-bottom: rem($bottom) solid $color;
		border-left: rem($left) solid transparent;
	} @else if $direction == right {
		margin-right: rem(-$right);
		border-top: rem($top) solid transparent;
		border-bottom: rem($bottom) solid transparent;
		border-left: rem($left) solid $color;
	} @else {
		margin-left: rem(-$left);
		border-top: rem($top) solid transparent;
		border-right: rem($right) solid $color;
		border-bottom: rem($bottom) solid transparent;
	}
}

// Text truncation
@mixin truncate($truncation-width, $selector, $rows: 7, $type: 1) {
	@if $type == 1 {
		min-width: 0;
	}

	&__#{$selector} {
		max-width: rem($truncation-width);
		overflow: hidden;

		@if $type == 0 {
			display: -webkit-box;
			-webkit-box-orient: vertical;
			-webkit-line-clamp: $rows;
		} @else {
			white-space: nowrap;
			text-overflow: ellipsis;
		}
	}
}

@mixin grid-cards($type: fit, $min: rem(290), $max: 1fr, $breakpoint: $phone) {
	display: grid;
	@content;

	@include media-min($breakpoint) {
		grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
	}
}

@mixin media-min-max($min-width: 320, $max-width: $tablet) {
	@media (min-width: em($min-width)) and (max-width: em($max-width - 0.02)) {
		@content;
	}
}

@mixin media-min($breakpoint) {
	@media (min-width: em($breakpoint)) {
		@content;
	}
}

@mixin media-max($breakpoint) {
	@media (max-width: em($breakpoint - 0.02)) {
		@content;
	}
}

@mixin media-hover($value: hover) {
	@media (any-hover: $value) {
		&:hover {
			@content;
		}
	}
}

// Gradient text
@mixin text-gradient($gradient) {
	background: $gradient;
	-webkit-background-clip: text;
	-webkit-text-fill-color: transparent;
}

@mixin pseudo($content: "", $position: absolute) {
	content: $content;
	position: $position;
}

@mixin width-height($width, $height) {
	width: $width;
	height: $height;
}

@mixin currency($sym) {
	&::after {
		content: "#{$sym}";
		@content;
	}
}
